Operating Systems laboratory
Assignment 5




Name: Sai Saketh Aluru
Roll No. 16CS30030
Group No. 41


Assignment 5: Simulation of Virtual Memory using Demand Paging


1. Implementation of Master:
        Master is the main process that starts executing first. It takes as input the values, k - no. of processes, m - max no. of pages, f - no. of frames available, and s - the size of the tlb. Then it creates the required data structures, i.e. the shared memory segments and the message queues. Then the scheduler, mmu processes are created along with the k processes that are requesting the pages. Master also creates the page reference string for each process which is passed as a command line argument to the execvp call. The page reference string is created using an exponential distribution, so that the page numbers are following locality. The number of pages requested by each process and the length of the page reference string is generated randomly in the given ranges.


1. Implementation of MMU:
        MMU takes as input 
argv[1] = mq2
                argv[2] = mq3
                argv[3] = sm1(page tables)
                argv[4] = sm2(free frame list)
                argv[5] = sm3(pid to max page number mapping)
                argv[6] = k(Number of processes)
                argv[7] = m(Max size of page tables)
                argv[8] = f(Max number of free frames)
                argv[9] = s(Max size of tlb) 
        It waits on the message queue mq3 for page numbers from the user processes. Once it receives a page number, it first checks the tlb, which is implemented using an STL unordered map(hash table), where the process pid and the page number together form the key for hashing and the frame no., counter value is taken as the value to be stored. If the frame is found, then the value is returned. Else, the page tables are now searched. All the page tables reside in the shared memory segment created by the master and are taken as a 2D array, of size kxm, where each row is the page table corresponding to a particular process. The mapping of the process pids to the indices is maintained separately in another vector. If the page is invalid, a value of -2 is sent to the process. Else, if the page is found in the page table, the frame is sent to the process and the tlb is updated. If the frame is not loaded yet, then a page fault occurs, and -1 is sent to the process. The page fault is then handled by checking if any free frame is available or not. If it is available, then this frame no. is assigned to the page no. causing the page fault. Else, a victim page is selected using the LRU scheme and replaced with the new page no. 
        For knowing the information about access times for LRU, we maintain a counter for each page no. as well as a global counter. Each access increments the global counter and whenever a page is accessed, its counter is set to the value of the global counter. For finding the victim page, the page with the least counter value is then chosen. 
        After handling the page fault or termination of the process (indicated by a -9), the mmu sends a message to the scheduler indicating it to schedule the next process
1. Implementation of Scheduler:
        The scheduler is responsible for scheduling the processes in FCFS scheme. It reads the process pids and starts their execution by giving them signals. It then waits for a message from mmu. If a page fault occurs, then the current process is kept at the back of the ready queue. Else the current process is discarded. After both messages, the next process is read and its execution is started. After all the processes have terminated, the scheduler indicates the master process, which then terminates the scheduler, mmu and the other processes before exiting itself.
1. Implementation of Process:
        Each process takes as input the page reference string generated by master along with the ids of the required data structures. Initially, all the processes put themselves to sleep using the pause() call and are woken up by the signal sent by scheduler process. Each of them read the string and send the page numbers in order to the mmu and wait for the response. If a -2 is received, it means it is an invalid page request and the process exits. Else, if a -1 is received, its a page fault and the process goes to sleep. If a positive number is received, it indicates a frame number and the next page number is sent. After all page numbers are done, a -9 is sent to indicate termination.